{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","handleText","e","setState","target","value","handleCheckbox","handleDate","handleClick","length","props","add","maxDate","this","className","type","placeholder","onChange","id","htmlFor","min","max","onClick","Component","Task","task","active","important","finishDate","style","color","change","delete","finish","toLocaleString","TaskList","tasks","filter","done","sort","a","b","toLowerCase","activeTasks","map","key","doneTasks","App","counter","deleteTask","changeTaskStatus","Array","from","forEach","getTime","addTask","prevState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d4d23815.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass AddTask extends Component {\r\n  minDate = new Date().toISOString().slice(0, 10);\r\n  state = {\r\n    text: \"\",\r\n    checked: false,\r\n    date: this.minDate,\r\n  };\r\n\r\n  handleText = (e) => {\r\n    this.setState({\r\n      text: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleCheckbox = (e) => {\r\n    this.setState({\r\n      checked: e.target.checked,\r\n    });\r\n  };\r\n\r\n  handleDate = (e) => {\r\n    this.setState({\r\n      date: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleClick = () => {\r\n    const { text, checked, date } = this.state;\r\n    if (text.length > 2) {\r\n      const add = this.props.add(text, date, checked);\r\n      if (add) {\r\n        this.setState({\r\n          text: \"\",\r\n          checked: false,\r\n          date: this.minDate,\r\n        });\r\n      }\r\n    } else {\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let maxDate = this.minDate.slice(0, 4) * 1 + 1;\r\n    maxDate = maxDate + \"-12-31\";\r\n\r\n    return (\r\n      <div className=\"addTask\">\r\n        <input\r\n          className=\"addTask__input-task\"\r\n          type=\"text\"\r\n          placeholder=\"Enter new task\"\r\n          value={this.state.text}\r\n          onChange={this.handleText}\r\n        />\r\n        <input\r\n          className=\"addTask__checkbox\"\r\n          type=\"checkbox\"\r\n          checked={this.state.checked}\r\n          id=\"important\"\r\n          onChange={this.handleCheckbox}\r\n        />\r\n        <label className=\"addTask__label-priority\" htmlFor=\"important\">\r\n          Priority\r\n        </label>\r\n        <label className=\"addTask__label-date\" htmlFor=\"date\">\r\n          Time to do it\r\n        </label>\r\n        <input\r\n          className=\"addTask__date\"\r\n          type=\"date\"\r\n          value={this.state.date}\r\n          min={this.minDate}\r\n          max={maxDate}\r\n          onChange={this.handleDate}\r\n        />\r\n        <button className=\"addTask__btn\" onClick={this.handleClick}>\r\n          Add\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTask;\r\n","import React from \"react\";\r\n\r\nconst Task = (props) => {\r\n  const style = {\r\n    color: \"red\",\r\n  };\r\n\r\n  const { text, date, id, active, important, finishDate } = props.task;\r\n\r\n  if (active) {\r\n    return (\r\n      <div className=\"active-task__box\">\r\n        <div className=\"active-task__conte\">\r\n          <strong\r\n            className=\"active-task__name\"\r\n            style={important ? style : null}\r\n          >\r\n            {text}\r\n          </strong>{\" \"}\r\n          <span className=\"active-task__text\">- do to - </span>\r\n          <span className=\"active-task__date\">{date} </span>\r\n        </div>\r\n        <button\r\n          className=\"active-task__btn-done\"\r\n          onClick={() => props.change(id)}\r\n        >\r\n          Task done\r\n        </button>\r\n        <button\r\n          className=\"active-task__btn-delete\"\r\n          onClick={() => props.delete(id)}\r\n        >\r\n          X\r\n        </button>\r\n      </div>\r\n    );\r\n  } else {\r\n    const finish = new Date(finishDate).toLocaleString();\r\n    return (\r\n      <div className=\"done__box-d\">\r\n        <div className=\"done__box-d-conte1\">\r\n          <strong className=\"done__name-d\">{text}</strong>\r\n          <em className=\"done__date-d\"> (do to - {date})</em>\r\n        </div>\r\n        <div className=\"done__box-d-conte2\">\r\n          <span className=\"done__text-d\"> Task completed -</span>\r\n          <span className=\"done__date-complete-d\"> {finish}</span>\r\n        </div>\r\n        <button className=\"done__btn-delete-d\" onClick={() => props.delete(id)}>\r\n          X\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport Task from \"./Task\";\r\n\r\nconst TaskList = (props) => {\r\n  const active = props.tasks.filter((task) => task.active);\r\n  const done = props.tasks.filter((task) => !task.active);\r\n\r\n  if (done.length >= 2) {\r\n    done.sort((a, b) => {\r\n      if (a.finishDate < b.finishDate) {\r\n        return 1;\r\n      }\r\n      if (a.finishDate > b.finishDate) {\r\n        return -1;\r\n      }\r\n      return 0;\r\n    });\r\n  }\r\n  if (active.length >= 2) {\r\n    active.sort((a, b) => {\r\n      a = a.text.toLowerCase();\r\n      b = b.text.toLowerCase();\r\n\r\n      if (a < b) return -1;\r\n      if (a > b) return 1;\r\n      return 0;\r\n    });\r\n  }\r\n\r\n  const activeTasks = active.map((task) => (\r\n    <Task\r\n      key={task.id}\r\n      task={task}\r\n      delete={props.delete}\r\n      change={props.change}\r\n    />\r\n  ));\r\n  const doneTasks = done.map((task) => (\r\n    <Task\r\n      key={task.id}\r\n      task={task}\r\n      delete={props.delete}\r\n      change={props.change}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      <div className=\"active-task\">\r\n        <h1 className=\"active-task__title\">Tasks to be done</h1>\r\n        {activeTasks.length > 0 ? (\r\n          activeTasks\r\n        ) : (\r\n          <p className=\"active-task__no-task\">No tasks. You are a lucky man!</p>\r\n        )}\r\n      </div>\r\n      <div className=\"done\">\r\n        <h3 className=\"done__title-d\">\r\n          Tasks done <em>({done.length})</em>\r\n        </h3>\r\n        {done.length > 5 && (\r\n          <span className=\"done__max-task\">\r\n            only the last 5 tasks are displayed\r\n          </span>\r\n        )}\r\n        {doneTasks.slice(0, 5)}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","import React, { Component } from \"react\";\nimport AddTask from \"./AddTask\";\nimport TaskList from \"./TaskList\";\nimport \"../scss/App.scss\";\n\nclass App extends Component {\n  counter = 9;\n  state = {\n    tasks: [],\n  };\n\n  deleteTask = (id) => {\n    let tasks = [...this.state.tasks];\n    tasks = tasks.filter((task) => task.id !== id);\n    this.setState({\n      tasks,\n    });\n  };\n\n  changeTaskStatus = (id) => {\n    const tasks = Array.from(this.state.tasks);\n    tasks.forEach((task) => {\n      if (task.id === id) {\n        task.active = false;\n        task.finishDate = new Date().getTime();\n      }\n    });\n    this.setState({\n      tasks,\n    });\n  };\n\n  addTask = (text, date, important) => {\n    const task = {\n      id: this.counter,\n      text,\n      date,\n      important,\n      active: true,\n      finishDate: null,\n    };\n    this.counter++;\n\n    this.setState((prevState) => ({\n      tasks: [...prevState.tasks, task],\n    }));\n\n    return true;\n  };\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"header\">\n          <h1 className=\"header__title\"> TO OD APP </h1>\n        </div>\n        <AddTask add={this.addTask} />\n        <TaskList\n          tasks={this.state.tasks}\n          delete={this.deleteTask}\n          change={this.changeTaskStatus}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./scss/index.scss\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}